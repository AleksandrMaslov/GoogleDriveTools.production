worker_processes  1;
# Referes to single threaded process. Generally set to be equal to the number of CPUs or cores.

# error_log  logs/error.log;
# #Specifies the file where server logs. 

events {
    worker_connections  1024;
    # worker_processes and worker_connections allows you to calculate maxclients value: 
    # max_clients = worker_processes * worker_connections
}

http {
    include       mime.types;
    # anything written in /opt/nginx/conf/mime.types is interpreted as if written inside the http { } block

    default_type  application/octet-stream;

    log_format main      '$remote_addr - $remote_user [$time_local] '
                         '"$request" $status $bytes_sent '
                         '"$http_referer" "$http_user_agent" '
                         '"$gzip_ratio"';

    log_format download  '$remote_addr - $remote_user [$time_local] '
                         '"$request" $status $bytes_sent '
                         '"$http_referer" "$http_user_agent" '
                         '"$http_range" "$sent_http_content_range"';

    client_header_timeout  3m;
    client_body_timeout    3m;
    send_timeout           3m;

    client_header_buffer_size    1k;
    large_client_header_buffers  4 4k;

    gzip on;
    gzip_min_length  1100;
    gzip_buffers     4 8k;
    gzip_types       text/plain;

    output_buffers   1 32k;
    postpone_output  1460;

    sendfile         on;
    # If serving locally stored static files, sendfile is essential to speed up the server,
    # But if using as reverse proxy one can deactivate it

    tcp_nopush       on;
    # works opposite to tcp_nodelay. Instead of optimizing delays, it optimizes the amount of data sent at once.

    tcp_nodelay      on;
    # send_lowat       12000;

    keepalive_timeout  65;
    # timeout during which a keep-alive client connection will stay open.

    server {
        server_name ${DOMAIN} www.${DOMAIN};

        # for certbot renewal
        location ~ /.well-known/acme-challenge {
            allow all;
            root /data/letsencrypt;
        }

        location ${SERVICE_API_PATH}/ {
            proxy_pass http://${SERVICE_DOMAIN}:${SERVICE_PORT}/;
            proxy_redirect default;
        }

        location ${ADMIN_PATH}/ {
            proxy_set_header X-Script-Name ${ADMIN_PATH};
            proxy_set_header X-Scheme $scheme;
            proxy_set_header Host $host;
            proxy_pass http://${ADMIN_DOMAIN}:${ADMIN_PORT}/;
            proxy_redirect off;
        }

        location / {
            proxy_pass http://${CLIENT_DOMAIN}:${CLIENT_PORT};
            proxy_redirect default;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
        }

        listen 443 ssl;
        ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    }

    server {
        if ($host = ${DOMAIN}) {
            return 301 https://$host$request_uri;
        } # managed by Certbot

        server_name ${DOMAIN} www.${DOMAIN};
        listen 80;
        return 404; # managed by Certbot
    }

}
